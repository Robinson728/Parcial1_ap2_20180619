@page "/Productos"
@page "/Productos/{ProductoId:int}"

@using Parcial1_ap2_20180619.Models;
@using Parcial1_ap2_20180619.BLL;
@inject IToastService toast

<EditForm Model="productos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator/>
    <div class="card">

        <div class="card-header">
            <h2>Registro de Productos</h2>
        </div>

        <div class="card-body">
            <form>
                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label>ProductoId</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="productos.ProductoId" class="form-control" col-4/>
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar"><i class="oi oi-magnifying-glass px-3"/></button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label>Descripci&oacute;n</label>
                    <InputText @bind-Value="productos.Descripcion" class="form-control"/>
                    <ValidationMessage For="@(() => productos.Descripcion)"/>
                </div>

                <div class="form-group">
                    <label>Existencia</label>
                    <InputNumber @bind-Value="productos.Existencia" class="form-control"/>
                    <ValidationMessage For="@(() => productos.Existencia)"/>
                </div>

                <div class="form-group">
                    <label>Costo</label>
                    <InputNumber @bind-Value="productos.Costo" class="form-control"/>
                    <ValidationMessage For="@(() => productos.Costo)"/>
                </div>

                <div class="form-group">
                    <label>Valor Inventario</label>
                    <InputNumber @bind-Value="productos.ValorInventario" class="form-control" readonly="true"/>
                </div>
            </form>
        </div>

        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo"><i class="oi oi-file mr-2"/>Nuevo</button>
                <button type="submit" class="btn btn-lg btn-success"><i class="oi oi-account-login mr-2" style="transform:rotate(90deg)"/>Guardar</button>
                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar"><i class="oi oi-trash mr-2"/>Eliminar</button>
            </div>
        </div>

    </div>
</EditForm>

@code {
    [Parameter]
    public int ProductoId { get; set; }

    private Productos productos = new Productos();

    protected override void OnInitialized()
    {
        Nuevo();
        Buscar();
    }

    public void MontoExistencia()
    {
        productos.ValorInventario = (productos.Costo * productos.Existencia);
    }

    public void Buscar()
    {
        if (productos.ProductoId > 0)
        {
            var encontrado = ProductosBLL.Buscar(productos.ProductoId);

            if (encontrado != null)
                this.productos = encontrado;
            else
                toast.ShowWarning("No encontrado.");
        }
    }

    public void Nuevo()
    {
        productos = new Productos();
    }

    public void Guardar()
    {
        bool guardado;

        MontoExistencia();
        guardado = ProductosBLL.Guardar(productos);

        if (guardado)
        {
            Nuevo();
            toast.ShowInfo("Guardado Correctamente.");
        }
        else
            toast.ShowError("No fue posible guardar.");
    }

    public void Eliminar()
    {
        bool eliminado;

        eliminado = ProductosBLL.Eliminar(productos.ProductoId);

        if (eliminado)
        {
            Nuevo();
            toast.ShowInfo("Eliminado Correctamente.");
        }
        else
            toast.ShowError("No fue posible eliminar.");
    }
}
